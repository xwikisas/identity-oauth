<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.5" reference="IdentityOAuth.LoginUIExtension" locale="">
  <web>IdentityOAuth</web>
  <name>LoginUIExtension</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>IdentityOAuth.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content/>
  <object>
    <name>IdentityOAuth.LoginUIExtension</name>
    <number>0</number>
    <className>XWiki.UIExtensionClass</className>
    <guid>31588dab-0888-42ee-be22-fb6747740768</guid>
    <class>
      <name>XWiki.UIExtensionClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <async_cached>
        <defaultValue>0</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType/>
        <name>async_cached</name>
        <number>3</number>
        <prettyName>Cached</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </async_cached>
      <async_context>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>1</multiSelect>
        <name>async_context</name>
        <number>4</number>
        <prettyName>Context elements</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator>, </separator>
        <separators>|, </separators>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <values>action=Action|doc.reference=Document|icon.theme=Icon theme|locale=Language|rendering.defaultsyntax=Default syntax|rendering.restricted=Restricted|rendering.targetsyntax=Target syntax|request.base=Request base URL|request.cookies|request.headers|request.parameters=Request parameters|request.remoteAddr|request.url=Request URL|request.wiki=Request wiki|user=User|wiki=Wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </async_context>
      <async_enabled>
        <defaultValue>0</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType/>
        <name>async_enabled</name>
        <number>2</number>
        <prettyName>Asynchronous rendering</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </async_enabled>
      <content>
        <disabled>0</disabled>
        <editor>Text</editor>
        <name>content</name>
        <number>1</number>
        <prettyName>Executed Content</prettyName>
        <restricted>0</restricted>
        <rows>25</rows>
        <size>120</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </content>
      <extensionPointId>
        <disabled>0</disabled>
        <name>extensionPointId</name>
        <number>5</number>
        <prettyName>Extension Point ID</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </extensionPointId>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>6</number>
        <prettyName>Extension ID</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parameters>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>parameters</name>
        <number>7</number>
        <prettyName>Extension Parameters</prettyName>
        <restricted>0</restricted>
        <rows>10</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </parameters>
      <scope>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>scope</name>
        <number>8</number>
        <prettyName>Extension Scope</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>wiki=Current Wiki|user=Current User|global=Global</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </scope>
    </class>
    <property>
      <async_cached/>
    </property>
    <property>
      <async_context/>
    </property>
    <property>
      <async_enabled/>
    </property>
    <property>
      <content>{{velocity output="false"}}
#macro (renderLoginCodes $loginCodes $hasSeveralLogins)
  #set ($count = 0)
  #set ($loginCodeWrapperStart = '&lt;div class="identity-oauth-provider-login"&gt;')
  #foreach ($loginCode in $identityOAuth.renderLoginCodes())
    #set ($count = $mathtool.add($count, 1))
    #set ($loginCodes="${loginCodes}${loginCodeWrapperStart}${loginCode}&lt;/div&gt;")
  #end
  #set ($hasSeveralLogins = $count &gt; 0)
#end
#macro (redirectToProvider $provider)
  #set ($currentLocation = "$request.requestURL?$!request.queryString")
  #set ($authQueryString = {
    'identityOAuth': 'start',
    'provider': $provider,
    'browserLocation': $currentLocation
  })
  #set ($loginURL = $xwiki.getURL('XWiki.XWikiLogin', 'login', $escapetool.url($authQueryString)))
  #set ($discard = $response.sendRedirect($loginURL))
#end
{{/velocity}}

{{velocity}}
#set ($mainReference = $services.model.createDocumentReference('', 'IdentityOAuth', 'WebPreferences'))
#set ($generalConfigDoc = $xwiki.getDocument('IdentityOAuth.IdentityOAuthGeneralConfiguration'))
#set ($generalConfigObj = $generalConfigDoc.getObject('IdentityOAuth.IdentityOAuthGeneralConfigClass'))
#if ($xcontext.getAction()=="login" &amp;&amp; $doc.fullName=="XWiki.XWikiLogin")
  #if (!$services.licensing.licensor.hasLicensureForEntity($mainReference))
    #set($statusMessage = "identityOAuth installed but not licensed.")
  #else
    #set($identityOAuth = $services.idoauth)
    #if ($identityOAuth.doesDetectReturn())
      #set($statusMessage = "IdentityOAuth: return of the OAuth bounce; if all goes well, the user can be logged in.")
      #set($result = $identityOAuth.processOAuthReturn())
      #set($prfx = "failed login:")
      #if ($result.startsWith($prfx))
        #set($email = $result.substring($prfx.length()))
        #set($errorMsg = " ${services.localization.render('idoauth.login.domainerror1')} ")
        #set($errorMsg = " ${errorMsg} ${services.localization.render('idoauth.login.domainerror2')} $!{email}.")
        #set($errorMsg = " ${errorMsg} ${services.localization.render('idoauth.login.domainerror3')}")
      #elseif ($result=="ok")
        #set ($successMsg = ${services.localization.render("idoauth.login.redirectmessage")})
        ## the browser should have been redirected by processOAuthReturn
      #else ## $result is "no user"
        #set($errorMsg = ${services.localization.render('idoauth.login.message')})
        #set($errorMsg = " ${errorMsg} ${services.localization.render('idoauth.login.error')}")
        #if($request.getAttribute("idoauth-error-message"))
          #set($errorMsg = "${errorMsg}: ${request.getAttribute('idoauth-error-message')}")
        #end
      #end
    #elseif ($request.identityOAuth == "start")
      ## Don't alter the login form in case the XWiki default implementation is requested.
      #if ("$!request.provider" != "default")
        #set($statusMsg = "IdentityOAuth Start login, should bounce to the provider.")
        #set($succesMsg = $services.localization.render("idoauth.login.oauth.message"))
        #set($success = $identityOAuth.processOAuthStart()) &lt;!-- processOAuthStart: $success --&gt;
        #if($success)
          #if($request.state)
            #set($successMsg = $services.localization.render("idoauth.login.oauth.successwithredirect"))
          #else
            #set($successMsg = $services.localization.render("idoauth.login.oauth.success"))
          #end
        #else
          #set($errorMsg = $services.localization.render("idoauth.login.oauth.failedOAuth"))
        #end
      #end
    #elseif ($request.identityOAuth)
      #set ($statusMsg = "no such identityOAuth operation '$request.identityOAuth'")
    #else
      #set ($defaultProvider = $identityOAuth.getDefaultProvider())
      #if ("$!defaultProvider" != "")
        #redirectToProvider($defaultProvider)
      #else
        #set($statusMsg = "Login page")
        ## assemble the login code from the providers
        #set($loginCodes = '&lt;div id="idoauth-login-choice"&gt;
                               &lt;div class="col-xs-12"&gt;')
        #renderLoginCodes($loginCodes $hasSeveralLogins)
        #set($loginCodes="${loginCodes}&lt;/div&gt;&lt;div style='clear: both;'&gt;&lt;/div&gt;&lt;/div&gt;")
      #end
    #end

    ## ============================================== end of velocity preparation ===============================

    {{html clean="false" wiki="false"}}&lt;!-- this is IdentityOAuth --&gt;
    &lt;!-- This code is displayed on the login page, so we cannot use a ssx skin extension since guest users may have
    restricted view rights and the style won't be displayed --&gt;
    &lt;style&gt;
    .provider-login-button {
      background: white;
      color: #333;
      border: #e8e8e8 2px solid;
      display: flex;
      align-items: center;
    }
    .provider-login-button &gt;img {
      height: 1.1em;
      margin-right: 2%;
    }
    .identity-oauth-provider-login {
      padding: 3% 0;
    }

    #idoauth-login-choice {
      margin-bottom: 5%;
    }
    &lt;/style&gt;
    &lt;!-- ======= ${escapetool.xml($statusMsg)} ====== --&gt;

    #if ($successMsg || $errorMsg)
    &lt;script type="text/javascript"&gt;
      // Identity OAuth Login Extension: Success or warning messages
      document.addEventListener('DOMContentLoaded', function() {
        var p = document.createElement("p"), div = document.createElement("div");
        #if ($successMsg)
          p.innerText = "${escapetool.javascript($successMsg)}";
          div.className = "box successmessage";
        #elseif ($errorMsg)
          p.innerText = "${escapetool.javascript($errorMsg)}";
          div.className = "box warningmessage";
        #end
        div.appendChild(p);
        var c = document.getElementById("mainContentArea")
        c.insertBefore(div, c.firstChild);
      });
    &lt;/script&gt;
    #elseif($hasSeveralLogins)
    &lt;script type="text/javascript"&gt;
      // Identity OAuth Login Extension: Button: offer a button to go to the provider. Don't alter the login if no other
      // providers are defined.
      document.addEventListener('DOMContentLoaded', function() {
        require(['jquery', 'xwiki-events-bridge', 'xwiki-meta'], function($, xm) {
          var getURLParams = function(url) {
            let obj = {};
            const queryString = url.split('?')[1];
            if (queryString) {
              const params = queryString.split('&amp;');
              for (var i = 0; i &lt; params.length; i++) {
                const param = params[i].split('=');

                const paramValue = param[1].length &gt; 0 ? param[1] : '';
                obj[param[0]] = paramValue;
              }
            }
            return obj;
          };
          var getUpdatedRedirect = function(xredirect, anchor) {
            xredirect = decodeURIComponent(xredirect);
            // Don't override existing anchors.
            if (xredirect.indexOf('#') &lt; 0) {
              xredirect += anchor;
            }
            return encodeURIComponent(xredirect);
          };
          var toQueryString = function(params) {
            let queryString = '';
            for (const param of Object.entries(params)) {
              if (queryString.length &gt; 0) {
                queryString += '&amp;';
              }
              queryString += param.join('=');
            }
            return queryString;
          };
          var updateAnchor = function(url, anchor) {
            let queryString = '';
            const params = new URL(url).searchParams;
            let xredirect = params.get('xredirect');
            if (xredirect != undefined) {
              params.set('xredirect', getUpdatedRedirect(xredirect, anchor));
            }
            queryString = params.toString();
            url = url.split('?')[0] + '?' + queryString;
            return url;
          };
          window.loginWithXWiki = function() {
              jQuery(".panel .panel-body dl").show()
              return false;
          }
          if (XWiki.contextaction == "login" || XWiki.contextaction == "loginsubmit" ) {
            var url = location.href, baseUrl = url;
            if (url.indexOf('?') &lt; 0){
                url=url+'?';
            } else {
                baseUrl = url.substring(0, url.indexOf('?'));
            }
            // The xredirect parameter is encoded and added from the server side, but the anchor part is not accessible
            // from there, and only added back after by the browser. So make sure that this is encoded as well as part
            // of the redirect parameter.
            if (url.indexOf('#') &gt; -1) {
              url = updateAnchor(url.split('#')[0], window.location.hash);
            }
            if (url.indexOf('identityOAuth=')&gt;=0) {
                url = url.replace(/identityOAuth=[a-zA-Z]*/, "identityOAuth=start");
            } else {
                url = url + "&amp;identityOAuth=start";
            }
            url = url + "&amp;browserLocation=" + escape(baseUrl);

            var loginCode = "${escapetool.javascript($loginCodes)}";
            loginCode = loginCode.replace("-URL-",url);
            jQuery(loginCode).insertBefore(jQuery(".panel .panel-body dl"));

            if (XWiki.contextaction != "loginsubmit") {
              jQuery(".panel .panel-body dl").hide();
            }
          }
        }); // end requirejs
      });
    &lt;/script&gt;
    #end ## if ($successMsg || $errorMsg)
  {{/html}}
  #end ## identityOAuth is active
#end ## on login page
{{/velocity}}
</content>
    </property>
    <property>
      <extensionPointId>org.xwiki.platform.topmenu.left</extensionPointId>
    </property>
    <property>
      <name>com.xwiki.identity-oauth.loginUIX</name>
    </property>
    <property>
      <parameters/>
    </property>
    <property>
      <scope/>
    </property>
  </object>
</xwikidoc>
